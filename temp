
    int x = 0;
    for (int i = 0; i < 256; i++)
    {
        switch( i )
        {
            case LDA_IMM:
                cout << "\"LDA_IMM\"";
            break;
        case LDA_ZP:
            cout << "\"LDA_ZP\"";
            break;
        case LDA_ZP_X:
            cout << "\"LDA_ZP_X\"";
            break;
        case LDA_ABS:
            cout << "\"LDA_ABS\"";
            break;
        case LDA_ABS_X:
            cout << "\"LDA_ABS_X\"";
            break;
        case LDA_ABS_Y:
            cout << "\"LDA_ABS_Y\"";
            break;
        case LDA_IND_X:
            cout << "\"LDA_IND_X\"";
            break;
        case LDA_IND_Y:
            cout << "\"LDA_IND_Y\"";
            break;

        case LDX_IMM:
            cout << "\"LDX_IMM\"";
            break;
        case LDX_ZP:
            cout << "\"LDX_ZP\"";
            break;
        case LDX_ZP_Y:
            cout << "\"LDX_ZP_Y\"";
            break;
        case LDX_ABS:
            cout << "\"LDX_ABS\"";
            break;
        case LDX_ABS_Y:
            cout << "\"LDX_ABS_Y\"";
            break;

        case LDY_IMM:
            cout << "\"LDY_IMM\"";
            break;
        case LDY_ZP:
            cout << "\"LDY_ZP\"";
            break;
        case LDY_ZP_X:
            cout << "\"LDY_ZP_X\"";
            break;
        case LDY_ABS:
            cout << "\"LDY_ABS\"";
            break;
        case LDY_ABS_X:
            cout << "\"LDY_ABS_X\"";
            break;

        case STA_ZP:
            cout << "\"STA_ZP\"";
            break;
        case STA_ZP_X:
            cout << "\"STA_ZP_X\"";
            break;
        case STA_ABS:
            cout << "\"STA_ABS\"";
            break;
        case STA_ABS_X:
            cout << "\"STA_ABS_X\"";
            break;
        case STA_ABS_Y:
            cout << "\"STA_ABS_Y\"";
            break;
        case STA_IND_X:
            cout << "\"STA_IND_X\"";
            break;
        case STA_IND_Y:
            cout << "\"STA_IND_Y\"";
            break;

        case STX_ZP:
            cout << "\"STX_ZP\"";
            break;
        case STX_ZP_Y:
            cout << "\"STX_ZP_Y\"";
            break;
        case STX_ABS:
            cout << "\"STX_ABS\"";
            break;

        case STY_ZP:
            cout << "\"STY_ZP\"";
            break;
        case STY_ZP_X:
            cout << "\"STY_ZP_X\"";
            break;
        case STY_ABS:
            cout << "\"STY_ABS\"";
            break;

        // ADD to accumulator with carry
        case ADC_IMM:
            cout << "\"ADC_IMM\"";
            break;
        case ADC_ZP:
            cout << "\"ADC_ZP\"";
            break;
        case ADC_ZP_X:
            cout << "\"ADC_ZP_X\"";
            break;
        case ADC_ABS:
            cout << "\"ADC_ABS\"";
            break;
        case ADC_ABS_X:
            cout << "\"ADC_ABS_X\"";
            break;
        case ADC_ABS_Y:
            cout << "\"ADC_ABS_Y\"";
            break;
        case ADC_IND_X:
            cout << "\"ADC_IND_X\"";
            break;
        case ADC_IND_Y:
            cout << "\"ADC_IND_Y\"";
            break;

        // Subtract from accumulator with borrow
        case SBC_IMM:
            cout << "\"SBC_IMM\"";
            break;
        case SBC_ZP:
            cout << "\"SBC_ZP\"";
            break;
        case SBC_ZP_X:
            cout << "\"SBC_ZP_X\"";
            break;
        case SBC_ABS:
            cout << "\"SBC_ABS\"";
            break;
        case SBC_ABS_X:
            cout << "\"SBC_ABS_X\"";
            break;
        case SBC_ABS_Y:
            cout << "\"SBC_ABS_Y\"";
            break;
        case SBC_IND_X:
            cout << "\"SBC_IND_X\"";
            break;
        case SBC_IND_Y:
            cout << "\"SBC_IND_Y\"";
            break;

        // Increment memory by one
        case INC_ZP:
            cout << "\"INC_ZP\"";
            break;
        case INC_ZP_X:
            cout << "\"INC_ZP_X\"";
            break;
        case INC_ABS:
            cout << "\"INC_ABS\"";
            break;
        case INC_ABS_X:
            cout << "\"INC_ABS_X\"";
            break;

        // Decrease memory by one
        case DEC_ZP:
            cout << "\"DEC_ZP\"";
            break;
        case DEC_ZP_X:
            cout << "\"DEC_ZP_X\"";
            break;
        case DEC_ABS:
            cout << "\"DEC_ABS\"";
            break;
        case DEC_ABS_X:
            cout << "\"DEC_ABS_X\"";
            break;

        // Increase X by one
        case INX:
            cout << "\"INX\"";
            break;
        // Decrease X by one
        case DEX:
            cout << "\"DEX\"";
            break;
        // Increase Y by one
        case INY:
            cout << "\"INY\"";
            break;
        // Decrease Y by one
        case DEY:
            cout << "\"DEY\"";
            break;

        // And accumulator with memory
        case AND_IMM:
            cout << "\"AND_IMM\"";
            break;
        case AND_ZP:
            cout << "\"AND_ZP\"";
            break;
        case AND_ZP_X:
            cout << "\"AND_ZP_X\"";
            break;
        case AND_ABS:
            cout << "\"AND_ABS\"";
            break;
        case AND_ABS_X:
            cout << "\"AND_ABS_X\"";
            break;
        case AND_ABS_Y:
            cout << "\"AND_ABS_Y\"";
            break;
        case AND_IND_X:
            cout << "\"AND_IND_X\"";
            break;
        case AND_IND_Y :
            cout << "\"AND_IND_Y\"";
            break;

        // Or accumulator with memory
        case ORA_IMM:
            cout << "\"ORA_IMM\"";
            break;
        case ORA_ZP:
            cout << "\"ORA_ZP\"";
            break;
        case ORA_ZP_X:
            cout << "\"ORA_ZP_X\"";
            break;
        case ORA_ABS:
            cout << "\"ORA_ABS\"";
            break;
        case ORA_ABS_X:
            cout << "\"ORA_ABS_X\"";
            break;
        case ORA_ABS_Y:
            cout << "\"ORA_ABS_Y\"";
            break;
        case ORA_IND_X:
            cout << "\"ORA_IND_X\"";
            break;
        case ORA_IND_Y:
            cout << "\"ORA_IND_Y\"";
            break;

        // Exclusive or accumulator with memory
        case EOR_IMM:
            cout << "\"EOR_IMM\"";
            break;
        case EOR_ZP:
            cout << "\"EOR_ZP\"";
            break;
        case EOR_ZP_X:
            cout << "\"EOR_ZP_X\"";
            break;
        case EOR_ABS:
            cout << "\"EOR_ABS\"";
            break;
        case EOR_ABS_X:
            cout << "\"EOR_ABS_X\"";
            break;
        case EOR_ABS_Y:
            cout << "\"EOR_ABS_Y\"";
            break;
        case EOR_IND_X:
            cout << "\"EOR_IND_X\"";
            break;
        case EOR_IND_Y:
            cout << "\"EOR_IND_Y\"";
            break;

            //      +-+-+-+-+-+-+-+-+
            // C <- |7|6|5|4|3|2|1|0| <- 0              N Z C I D V
            //      +-+-+-+-+-+-+-+-+                   / / / _ _ _
         case ASL_ACC:
             cout << "\"ASL_ACC\"";
            break;
        case ASL_ZP:
            cout << "\"ASL_ZP\"";
            break;
        case ASL_ZP_X:
            cout << "\"ASL_ZP_X\"";
            break;
        case ASL_ABS:
            cout << "\"ASL_ABS\"";
            break;
        case ASL_ABS_X:
            cout << "\"ASL_ABS_X\"";
            break;

            //      +-+-+-+-+-+-+-+-+
            // 0 -> |7|6|5|4|3|2|1|0| -> C              N Z C I D V
            //      +-+-+-+-+-+-+-+-+                   0 / / _ _ _
        case LSR_ACC:
            cout << "\"LSR_ACC\"";
            break;
        case LSR_ZP:
            cout << "\"LSR_ZP\"";
            break;
        case LSR_ZP_X:
            cout << "\"LSR_ZP_X\"";
            break;
        case LSR_ABS:
            cout << "\"LSR_ABS\"";
            break;
        case LSR_ABS_X:
            cout << "\"LSR_ABS_X\"";
            break;

            // +------------------------------+
            // |         M or A               |
            // |   +-+-+-+-+-+-+-+-+    +-+   |
            // +-< |7|6|5|4|3|2|1|0| <- |C| <-+         N Z C I D V
            //     +-+-+-+-+-+-+-+-+    +-+             / / / _ _ _
        case ROL_ACC:
            cout << "\"ROL_ACC\"";
            break;
        case ROL_ZP:
            cout << "\"ROL_ZP\"";
            break;
        case ROL_ZP_X:
            cout << "\"ROL_ZP_X\"";
            break;
        case ROL_ABS:
            cout << "\"ROL_ABS\"";
            break;
        case ROL_ABS_X:
            cout << "\"ROL_ABS_X\"";
            break;

            // +------------------------------+
            // |                              |
            // |   +-+    +-+-+-+-+-+-+-+-+   |
            // +-> |C| -> |7|6|5|4|3|2|1|0| >-+         N Z C I D V
            //     +-+    +-+-+-+-+-+-+-+-+             / / / _ _ _
        case ROR_ACC:
            cout << "\"ROR_ACC\"";
            break;
        case ROR_ZP:
            cout << "\"ROR_ZP\"";
            break;
        case ROR_ZP_X:
            cout << "\"ROR_ZP_X\"";
            break;
        case ROR_ABS:
            cout << "\"ROR_ABS\"";
            break;
        case ROR_ABS_X:
            cout << "\"ROR_ABS_X\"";
            break;

            
        // Branches
        case BCC:
            cout << "\"BCC\"";
            break;
        case BCS:
            cout << "\"BCS\"";
            break;
        case BEQ:
            cout << "\"BEQ\"";
            break;
        case BNE:
            cout << "\"BNE - Z: \"";
            break;

        case BMI:
            cout << "\"BMI \"";
            break;

        case BPL:
            cout << "\"BPL \"";
            break;

        case BVC:
            cout << "\"BVC\"";
            break;

        case BVS:
            cout << "\"BVS\"";
            break;
            
        case BIT_ZP:
            cout << "\"BIT_ZP\"";
            break;
        case BIT_ABS:
            cout << "\"BIT_ABS\"";
            break;

        case SEC: // Set carry flag
            cout << "\"SEC\"";
            break;
        case SED: // Set decimal flag
            cout << "\"SED\"";
            break;
        case SEI: // Set interrupt flag
            cout << "\"SEI\"";
            break;

        case CLC: // Clear carry flag
            cout << "\"CLC\"";
            break;
        case CLD: // Clear decimal flag
            cout << "\"CLD\"";
            break;
        case CLI: // Clear interrupt flag
            cout << "\"CLI\"";
            break;
        case CLV: // Clear overflow flag
            cout << "\"CLV\"";
            break;

        case CMP_IMM:
            cout << "\"CMP_IMM\"";
            break;
        case CMP_ZP:
            cout << "\"CMP_ZP\"";
            break;
        case CMP_ZP_X:
            cout << "\"CMP_ZP_X\"";
            break;
        case CMP_ABS:
            cout << "\"CMP_ABS\"";
            break;
        case CMP_ABS_X:
            cout << "\"CMP_ABS_X\"";
            break;
        case CMP_ABS_Y:
            cout << "\"CMP_ABS_Y\"";
            break;
        case CMP_IND_X:
            cout << "\"CMP_IND_X\"";
            break;
        case CMP_IND_Y:
            cout << "\"CMP_IND_Y\"";
            break;

        case CPX_IMM:
            cout << "\"CPX_IMM\"";
            break;
        case CPX_ZP:
            cout << "\"CPX_ZP\"";
            break;
        case CPX_ABS:
            cout << "\"CPX_ABS\"";
            break;

        case CPY_IMM:
            cout << "\"CPY_IMM\"";
            break;
        case CPY_ZP:
            cout << "\"CPY_ZP\"";
            break;
        case CPY_ABS:
            cout << "\"CPY_ABS\"";
            break;

        case JMP_ABS:
            cout << "\"JMP_ABS\"";
            break;
        case JMP_IND:
            cout << "\"JMP_IND\"";
            break;

        case JSR:
            cout << "\"JSR\"";
            break;

        case RTS:
            cout << "\"RTS\"";
            break;

        case BRK:
            cout << "\"BRK\"";
            break;

        case RTI:  // Return from interrupt
            cout << "\"RTI\"";
            break;

        case NOP:
            cout << "\"NOP\"";
            break;

        case PHA:  // Push accumulator to stack
            cout << "\"PHA\"";
            break;
        case PLA:  // Pull accumulator from stack
            cout << "\"PLA\"";
            break;
        case PHP:  // Push status to stack
            cout << "\"PHP\"";
            break;
        case PLP:  // Pull status from stack
            cout << "\"PLP\"";
            break;

        case TAX:  // Transfer A to X
            cout << "\"TAX\"";
            break;
        case TXA:  // Transfer A to A
            cout << "\"TXA\"";
            break;
        case TAY:  // Transfer A to Y
            cout << "\"TAY\"";
            break;
        case TYA:  // Transfer Y to A
            cout << "\"TYA\"";
            break;
        case TXS:  // Transfer X to SP
            cout << "\"TXS\"";
            break;
        case TSX:  // Transfer SP to X
            cout << "\"TSX\"";
            break;
        default:
            cout << "\"(none)\"";
        };

        cout << ", ";
        if ( ++x == 8 )
        {
            cout << endl;
            x = 0;
        }
    }
    cout << endl;
    cout << endl;
    cout << endl;
    cout << endl;
    sleep(2);
